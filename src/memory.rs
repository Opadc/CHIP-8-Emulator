use std::ops::{Index, IndexMut};

const MEM_SIZE: usize = 4096;

#[derive(Clone, Copy)]
pub struct Memory {
    mem: [u8; MEM_SIZE],
}

impl Memory {
    pub fn new() -> Self {
        let mut memory = Memory { mem: [0; MEM_SIZE] };
        memory.load_font();
        memory
    }
    pub fn load_prog(&mut self, addr: usize, data: &[u8]) {
        data.into_iter().enumerate().for_each(|(p, &byte)| {
            self.mem[addr + p] = byte;
        })
    }

    fn load_font(&mut self) {
        for i in 0..FONT_SET.len() {
            self.mem[i] = FONT_SET[i];
        }
    }
}

impl<T: Into<usize>> Index<T> for Memory {
    type Output = u8;

    fn index(&self, index: T) -> &Self::Output {
        &self.mem[index.into()]
    }
}
impl<T: Into<usize>> IndexMut<T> for Memory {
    fn index_mut(&mut self, index: T) -> &mut Self::Output {
        &mut self.mem[index.into()]
    }
}

//font 0---F 8*5 pixel
pub const FONT_SET: [u8; 80] = [
    0xF0, 0x90, 0x90, 0x90, 0xF0, 0x20, 0x60, 0x20, 0x20, 0x70, 0xF0, 0x10, 0xF0, 0x80, 0xF0, 0xF0,
    0x10, 0xF0, 0x10, 0xF0, 0x90, 0x90, 0xF0, 0x10, 0x10, 0xF0, 0x80, 0xF0, 0x10, 0xF0, 0xF0, 0x80,
    0xF0, 0x90, 0xF0, 0xF0, 0x10, 0x20, 0x40, 0x40, 0xF0, 0x90, 0xF0, 0x90, 0xF0, 0xF0, 0x90, 0xF0,
    0x10, 0xF0, 0xF0, 0x90, 0xF0, 0x90, 0x90, 0xE0, 0x90, 0xE0, 0x90, 0xE0, 0xF0, 0x80, 0x80, 0x80,
    0xF0, 0xE0, 0x90, 0x90, 0x90, 0xE0, 0xF0, 0x80, 0xF0, 0x80, 0xF0, 0xF0, 0x80, 0xF0, 0x80, 0x80,
];
